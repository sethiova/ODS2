---
---

<!-- El bot√≥n se renderizar√° aqu√≠ via JavaScript -->
<div id="accessibility-portal"></div>

<script>
  // Configuraci√≥n del portal para evitar filtros CSS
  class AccessibilityPortal {
    private static instance: AccessibilityPortal;
    private portal: HTMLElement | null = null;
    private isInitialized = false;
    
    private currentSettings = {
      fontLevel: 0,
      fontFamily: 'default',
      darkMode: false,
      highContrast: false,
      daltonismFilter: false,
      largeCursor: false,
      hideImages: false,
      highlightLinks: false
    };

    static getInstance(): AccessibilityPortal {
      if (!AccessibilityPortal.instance) {
        AccessibilityPortal.instance = new AccessibilityPortal();
      }
      return AccessibilityPortal.instance;
    }

    initialize() {
      if (this.isInitialized) return;
      
      console.log('üöÄ Inicializando Portal de Accesibilidad...');
      
      // Crear portal independiente
      this.createPortal();
      
      // Cargar configuraciones
      this.loadSettings();
      this.applyAllSettings();
      
      // Configurar event listeners
      this.setupEventListeners();
      
      this.isInitialized = true;
      console.log('‚úÖ Portal de Accesibilidad inicializado');
    }

    private createPortal() {
      // Crear contenedor del portal
      this.portal = document.createElement('div');
      this.portal.id = 'floating-accessibility-button';
      this.portal.className = 'floating-accessibility-btn';
      
      // HTML del bot√≥n y panel
      this.portal.innerHTML = `
        <button 
          id="floating-toggle" 
          class="accessibility-float-btn" 
          aria-label="Opciones de accesibilidad"
          title="Opciones de Accesibilidad"
        >
          <svg class="accessibility-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="5" r="2" fill="currentColor"/>
            <path d="M7 22v-6l1.5-4.5L7 8h10l-1.5 3.5L17 16v6h-2v-5l-1-2h-4l-1 2v5H7z" fill="currentColor"/>
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
          </svg>
          <span class="btn-pulse"></span>
        </button>
        
        <div id="accessibility-hover-panel" class="accessibility-hover-panel">
          <div class="panel-header">
            <h3>‚ôø Accesibilidad</h3>
          </div>
          
          <div class="controls-compact">
            <div class="control-row">
              <label class="control-label">Texto:</label>
              <div class="button-group">
                <button id="font-decrease-float" class="control-btn-mini" title="Disminuir texto">A-</button>
                <button id="font-reset-float" class="control-btn-mini active" title="Tama√±o normal">A</button>
                <button id="font-increase-float" class="control-btn-mini" title="Aumentar texto">A+</button>
              </div>
              <span id="font-level-indicator" class="font-level">100%</span>
            </div>

            <div class="control-row">
              <label class="control-label">Fuente:</label>
              <select id="font-family-float" class="font-select">
                <option value="default">Normal</option>
                <option value="serif">Serif</option>
                <option value="monospace">Mono</option>
                <option value="dyslexic">Dislexia</option>
              </select>
            </div>

            <div class="toggle-controls">
              <button id="dark-mode-float" class="toggle-btn" title="Modo oscuro">
                <span class="toggle-icon">üåô</span>
                <span class="toggle-label">Oscuro</span>
              </button>
              <button id="high-contrast-float" class="toggle-btn" title="Alto contraste">
                <span class="toggle-icon">‚ö´</span>
                <span class="toggle-label">Contraste</span>
              </button>
              <button id="daltonism-filter-float" class="toggle-btn" title="Filtro daltonismo">
                <span class="toggle-icon">üé®</span>
                <span class="toggle-label">Daltonismo</span>
              </button>
              <button id="cursor-change-float" class="toggle-btn" title="Cursor grande">
                <span class="toggle-icon">üñ±Ô∏è</span>
                <span class="toggle-label">Cursor</span>
              </button>
              <button id="remove-images-float" class="toggle-btn" title="Ocultar im√°genes">
                <span class="toggle-icon">üñºÔ∏è</span>
                <span class="toggle-label">Sin IMG</span>
              </button>
              <button id="highlight-links-float" class="toggle-btn" title="Resaltar enlaces">
                <span class="toggle-icon">üîó</span>
                <span class="toggle-label">Enlaces</span>
              </button>
            </div>

            <div class="action-controls">
              <button id="reset-all-float" class="action-btn reset" title="Restablecer todo">
                <span class="action-icon">‚Üª</span>
                Reset
              </button>
              <button id="help-accessibility-float" class="action-btn help" title="Ayuda">
                <span class="action-icon">?</span>
                Ayuda
              </button>
            </div>
          </div>
        </div>
      `;

      // Inyectar CSS cr√≠tico directamente
      this.injectStyles();
      
      // Insertar al final del body (fuera de contextos problem√°ticos)
      document.body.appendChild(this.portal);
    }

    private injectStyles() {
      if (document.getElementById('accessibility-portal-styles')) return;
      
      const style = document.createElement('style');
      style.id = 'accessibility-portal-styles';
      style.textContent = `
        .floating-accessibility-btn {
          position: fixed !important;
          top: 100px !important;
          right: 20px !important;
          z-index: 99999 !important;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
          filter: none !important;
          transform: translateZ(0) !important;
          isolation: isolate !important;
          pointer-events: auto !important;
        }

        .accessibility-float-btn {
          width: 56px !important;
          height: 56px !important;
          background: linear-gradient(135deg, #4caf50 0%, #45a049 100%) !important;
          border: none !important;
          border-radius: 50% !important;
          color: white !important;
          cursor: pointer !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          box-shadow: 0 4px 20px rgba(76, 175, 80, 0.4) !important;
          transition: all 0.3s ease !important;
          position: relative !important;
          overflow: hidden !important;
          filter: none !important;
        }

        .accessibility-float-btn:hover {
          background: linear-gradient(135deg, #45a049 0%, #388e3c 100%) !important;
          transform: scale(1.1) !important;
          box-shadow: 0 6px 25px rgba(76, 175, 80, 0.6) !important;
        }

        .accessibility-icon {
          width: 28px !important;
          height: 28px !important;
          transition: transform 0.3s ease !important;
          filter: none !important;
          color: white !important;
        }

        .accessibility-float-btn:hover .accessibility-icon {
          transform: rotate(10deg) !important;
        }

        .btn-pulse {
          position: absolute !important;
          top: 50% !important;
          left: 50% !important;
          width: 100% !important;
          height: 100% !important;
          border-radius: 50% !important;
          background: rgba(255, 255, 255, 0.3) !important;
          transform: translate(-50%, -50%) scale(0) !important;
          animation: pulse 2s infinite !important;
          filter: none !important;
        }

        @keyframes pulse {
          0% { transform: translate(-50%, -50%) scale(0) !important; opacity: 1 !important; }
          70% { transform: translate(-50%, -50%) scale(1) !important; opacity: 0.7 !important; }
          100% { transform: translate(-50%, -50%) scale(1.4) !important; opacity: 0 !important; }
        }

        .accessibility-hover-panel {
          position: absolute !important;
          top: 100% !important;
          right: 0 !important;
          margin-top: 8px !important;
          background: white !important;
          border: 2px solid #4caf50 !important;
          border-radius: 12px !important;
          box-shadow: 0 8px 32px rgba(0,0,0,0.15) !important;
          opacity: 0 !important;
          visibility: hidden !important;
          transform: translateY(-10px) !important;
          transition: all 0.3s ease !important;
          min-width: 250px !important;
          z-index: 99999 !important;
          backdrop-filter: blur(10px) !important;
          filter: none !important;
          color: #333 !important;
        }

        .floating-accessibility-btn:hover .accessibility-hover-panel,
        .accessibility-hover-panel:hover {
          opacity: 1 !important;
          visibility: visible !important;
          transform: translateY(0) !important;
        }

        .panel-header {
          background: linear-gradient(135deg, #4caf50, #45a049) !important;
          color: white !important;
          padding: 0.75rem 1rem !important;
          border-radius: 10px 10px 0 0 !important;
          margin: -2px -2px 0 -2px !important;
          filter: none !important;
        }

        .panel-header h3 {
          margin: 0 !important;
          font-size: 0.9rem !important;
          font-weight: 600 !important;
          text-align: center !important;
          color: white !important;
          filter: none !important;
        }

        .controls-compact {
          padding: 1rem !important;
          display: flex !important;
          flex-direction: column !important;
          gap: 1rem !important;
          filter: none !important;
        }

        .control-row {
          display: flex !important;
          align-items: center !important;
          gap: 0.5rem !important;
          flex-wrap: wrap !important;
        }

        .control-label {
          font-size: 0.75rem !important;
          font-weight: 600 !important;
          color: #666 !important;
          min-width: 50px !important;
          filter: none !important;
        }

        .button-group {
          display: flex !important;
          gap: 2px !important;
          border-radius: 4px !important;
          overflow: hidden !important;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
        }

        .control-btn-mini {
          background: #e9ecef !important;
          color: #495057 !important;
          border: none !important;
          padding: 0.3rem 0.5rem !important;
          cursor: pointer !important;
          font-size: 0.7rem !important;
          font-weight: 600 !important;
          transition: all 0.2s ease !important;
          min-width: 28px !important;
          border-radius: 0 !important;
          position: relative !important;
          filter: none !important;
        }

        .control-btn-mini:hover {
          background: #dee2e6 !important;
          transform: translateY(-1px) !important;
        }

        .control-btn-mini.active {
          background: #28a745 !important;
          color: white !important;
          box-shadow: inset 0 2px 4px rgba(0,0,0,0.2) !important;
          transform: scale(1.05) !important;
        }

        .font-level {
          font-size: 0.7rem !important;
          font-weight: 600 !important;
          color: #4caf50 !important;
          background: #f8f9fa !important;
          padding: 0.2rem 0.4rem !important;
          border-radius: 4px !important;
          min-width: 45px !important;
          text-align: center !important;
          filter: none !important;
        }

        .font-select {
          font-size: 0.75rem !important;
          padding: 0.3rem 0.5rem !important;
          border: 1px solid #ced4da !important;
          border-radius: 4px !important;
          background: white !important;
          min-width: 80px !important;
          color: #333 !important;
          filter: none !important;
        }

        .toggle-controls {
          display: grid !important;
          grid-template-columns: repeat(3, 1fr) !important;
          gap: 0.5rem !important;
        }

        .toggle-btn {
          background: #f8f9fa !important;
          border: 1px solid #e9ecef !important;
          color: #495057 !important;
          padding: 0.5rem 0.3rem !important;
          border-radius: 6px !important;
          cursor: pointer !important;
          transition: all 0.3s ease !important;
          display: flex !important;
          flex-direction: column !important;
          align-items: center !important;
          justify-content: center !important;
          gap: 0.2rem !important;
          min-height: 45px !important;
          position: relative !important;
          filter: none !important;
        }

        .toggle-btn:hover {
          background: #e9ecef !important;
          border-color: #4caf50 !important;
          transform: translateY(-1px) !important;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
        }

        .toggle-btn.active {
          background: #28a745 !important;
          border-color: #1e7e34 !important;
          color: white !important;
          box-shadow: 0 2px 8px rgba(40, 167, 69, 0.4) !important;
          transform: scale(1.05) !important;
        }

        .toggle-icon {
          font-size: 1rem !important;
          line-height: 1 !important;
          filter: none !important;
        }

        .toggle-label {
          font-size: 0.6rem !important;
          line-height: 1 !important;
          text-align: center !important;
          font-weight: 600 !important;
          filter: none !important;
        }

        .action-controls {
          display: grid !important;
          grid-template-columns: 1fr 1fr !important;
          gap: 0.5rem !important;
        }

        .action-btn {
          color: white !important;
          border: none !important;
          padding: 0.5rem !important;
          border-radius: 6px !important;
          cursor: pointer !important;
          font-size: 0.7rem !important;
          font-weight: 600 !important;
          transition: all 0.3s ease !important;
          display: flex !important;
          flex-direction: column !important;
          align-items: center !important;
          justify-content: center !important;
          gap: 0.2rem !important;
          min-height: 40px !important;
          filter: none !important;
        }

        .action-btn.reset {
          background: #dc3545 !important;
        }

        .action-btn.reset:hover {
          background: #c82333 !important;
        }

        .action-btn.help {
          background: #17a2b8 !important;
        }

        .action-btn.help:hover {
          background: #138496 !important;
        }

        .action-icon {
          font-size: 1rem !important;
          font-weight: bold !important;
          filter: none !important;
        }

        .accessibility-hover-panel::before {
          content: '' !important;
          position: absolute !important;
          top: -8px !important;
          right: 20px !important;
          width: 0 !important;
          height: 0 !important;
          border-left: 8px solid transparent !important;
          border-right: 8px solid transparent !important;
          border-bottom: 8px solid #4caf50 !important;
          filter: none !important;
        }

        @media (max-width: 768px) {
          .floating-accessibility-btn {
            top: 120px !important;
            right: 15px !important;
          }
          
          .accessibility-float-btn {
            width: 50px !important;
            height: 50px !important;
          }
          
          .accessibility-icon {
            width: 24px !important;
            height: 24px !important;
          }

          .accessibility-hover-panel {
            min-width: 220px !important;
            right: -10px !important;
          }

          .toggle-controls {
            grid-template-columns: repeat(2, 1fr) !important;
          }
        }
      `;
      
      document.head.appendChild(style);
    }

    private setupEventListeners() {
      if (!this.portal) return;

      // Event listeners para controles de fuente
      this.setupFontControls();
      
      // Event listeners para toggles
      this.setupToggleControls();
      
      // Event listeners para acciones
      this.setupActionControls();
    }

    private setupFontControls() {
      const fontDecreaseFloat = document.getElementById('font-decrease-float');
      const fontResetFloat = document.getElementById('font-reset-float');
      const fontIncreaseFloat = document.getElementById('font-increase-float');
      const fontFamilyFloat = document.getElementById('font-family-float');

      if (fontDecreaseFloat) {
        fontDecreaseFloat.addEventListener('click', () => {
          if (this.currentSettings.fontLevel > -3) {
            this.currentSettings.fontLevel--;
            this.applyFontSize();
            this.updateFontButtons();
            this.saveSettings();
          }
        });
      }

      if (fontResetFloat) {
        fontResetFloat.addEventListener('click', () => {
          this.currentSettings.fontLevel = 0;
          this.applyFontSize();
          this.updateFontButtons();
          this.saveSettings();
        });
      }

      if (fontIncreaseFloat) {
        fontIncreaseFloat.addEventListener('click', () => {
          if (this.currentSettings.fontLevel < 3) {
            this.currentSettings.fontLevel++;
            this.applyFontSize();
            this.updateFontButtons();
            this.saveSettings();
          }
        });
      }

      if (fontFamilyFloat) {
        fontFamilyFloat.addEventListener('change', (e) => {
          const target = e.target as HTMLSelectElement;
          this.currentSettings.fontFamily = target.value;
          this.applyFontFamily();
          this.saveSettings();
        });
      }
    }

    private setupToggleControls() {
      const toggleButtons = [
        { id: 'dark-mode-float', setting: 'darkMode', className: 'accessibility-dark-mode' },
        { id: 'high-contrast-float', setting: 'highContrast', className: 'accessibility-high-contrast' },
        { id: 'daltonism-filter-float', setting: 'daltonismFilter', className: 'accessibility-daltonism-filter' },
        { id: 'cursor-change-float', setting: 'largeCursor', className: 'accessibility-large-cursor' },
        { id: 'remove-images-float', setting: 'hideImages', className: 'accessibility-hide-images' },
        { id: 'highlight-links-float', setting: 'highlightLinks', className: 'accessibility-highlight-text' }
      ];

      toggleButtons.forEach(toggleConfig => {
        const button = document.getElementById(toggleConfig.id);
        if (button) {
          button.addEventListener('click', () => {
            const setting = toggleConfig.setting as keyof typeof this.currentSettings;
            (this.currentSettings as any)[setting] = !(this.currentSettings as any)[setting];
            
            if ((this.currentSettings as any)[setting]) {
              document.body.classList.add(toggleConfig.className);
              button.classList.add('active');
            } else {
              document.body.classList.remove(toggleConfig.className);
              button.classList.remove('active');
            }
            
            this.saveSettings();
          });
        }
      });
    }

    private setupActionControls() {
      const resetBtn = document.getElementById('reset-all-float');
      const helpBtn = document.getElementById('help-accessibility-float');

      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          if (confirm('¬øRestablecer todas las configuraciones de accesibilidad?')) {
            this.resetAll();
          }
        });
      }

      if (helpBtn) {
        helpBtn.addEventListener('click', () => {
          this.showHelp();
        });
      }
    }

    private applyFontSize() {
      const multiplier = 1 + (this.currentSettings.fontLevel * 0.25);
      document.documentElement.style.fontSize = (16 * multiplier) + 'px';
      
      const indicator = document.getElementById('font-level-indicator');
      if (indicator) {
        indicator.textContent = Math.round(multiplier * 100) + '%';
      }
    }

    private applyFontFamily() {
      document.body.classList.remove('font-serif', 'font-monospace', 'font-dyslexic');
      
      switch(this.currentSettings.fontFamily) {
        case 'serif':
          document.body.classList.add('font-serif');
          break;
        case 'monospace':
          document.body.classList.add('font-monospace');
          break;
        case 'dyslexic':
          document.body.classList.add('font-dyslexic');
          break;
      }
      
      const select = document.getElementById('font-family-float') as HTMLSelectElement;
      if (select) {
        select.value = this.currentSettings.fontFamily;
      }
    }

    private updateFontButtons() {
      const buttons = ['font-decrease-float', 'font-reset-float', 'font-increase-float'];
      buttons.forEach(id => {
        const btn = document.getElementById(id);
        if (btn) btn.classList.remove('active');
      });

      if (this.currentSettings.fontLevel === 0) {
        document.getElementById('font-reset-float')?.classList.add('active');
      } else if (this.currentSettings.fontLevel < 0) {
        document.getElementById('font-decrease-float')?.classList.add('active');
      } else {
        document.getElementById('font-increase-float')?.classList.add('active');
      }
    }

    private saveSettings() {
      try {
        localStorage.setItem('accessibility-settings-v3', JSON.stringify(this.currentSettings));
      } catch (error) {
        console.warn('No se pudieron guardar las configuraciones:', error);
      }
    }

    private loadSettings() {
      try {
        const saved = localStorage.getItem('accessibility-settings-v3');
        if (saved) {
          this.currentSettings = { ...this.currentSettings, ...JSON.parse(saved) };
        }
      } catch (error) {
        console.warn('No se pudieron cargar las configuraciones:', error);
      }
    }

    private applyAllSettings() {
      this.applyFontSize();
      this.applyFontFamily();
      
      const toggles = [
        { setting: 'darkMode', className: 'accessibility-dark-mode', buttonId: 'dark-mode-float' },
        { setting: 'highContrast', className: 'accessibility-high-contrast', buttonId: 'high-contrast-float' },
        { setting: 'daltonismFilter', className: 'accessibility-daltonism-filter', buttonId: 'daltonism-filter-float' },
        { setting: 'largeCursor', className: 'accessibility-large-cursor', buttonId: 'cursor-change-float' },
        { setting: 'hideImages', className: 'accessibility-hide-images', buttonId: 'remove-images-float' },
        { setting: 'highlightLinks', className: 'accessibility-highlight-text', buttonId: 'highlight-links-float' }
      ];

      toggles.forEach(toggle => {
        const setting = toggle.setting as keyof typeof this.currentSettings;
        if ((this.currentSettings as any)[setting]) {
          document.body.classList.add(toggle.className);
          document.getElementById(toggle.buttonId)?.classList.add('active');
        }
      });
      
      this.updateFontButtons();
    }

    private resetAll() {
      try {
        localStorage.removeItem('accessibility-settings-v3');
      } catch (error) {
        console.warn('No se pudo limpiar localStorage:', error);
      }
      
      document.body.classList.remove(
        'font-serif', 'font-monospace', 'font-dyslexic',
        'accessibility-dark-mode', 'accessibility-high-contrast',
        'accessibility-daltonism-filter', 'accessibility-large-cursor',
        'accessibility-hide-images', 'accessibility-highlight-text'
      );
      
      document.documentElement.style.fontSize = '';
      
      this.currentSettings = {
        fontLevel: 0,
        fontFamily: 'default',
        darkMode: false,
        highContrast: false,
        daltonismFilter: false,
        largeCursor: false,
        hideImages: false,
        highlightLinks: false
      };
      
      this.applyAllSettings();
      
      document.querySelectorAll('.toggle-btn, .control-btn-mini').forEach(btn => {
        btn.classList.remove('active');
      });
      
      document.getElementById('font-reset-float')?.classList.add('active');
    }

    private showHelp() {
      const helpText = `üõ†Ô∏è HERRAMIENTAS DE ACCESIBILIDAD

üìù TAMA√ëO DE TEXTO:
‚Ä¢ A- : Reducir hasta 3 niveles (75%)
‚Ä¢ A : Tama√±o normal (100%)
‚Ä¢ A+ : Aumentar hasta 3 niveles (175%)

üî§ FUENTE:
‚Ä¢ Normal: Inter (por defecto)
‚Ä¢ Serif: Georgia para mejor lectura
‚Ä¢ Mono: Courier para c√≥digo/n√∫meros
‚Ä¢ Dislexia: OpenDyslexic para dislexia

üé® VISUALIZACI√ìN:
‚Ä¢ üåô Modo Oscuro: Reduce fatiga visual
‚Ä¢ ‚ö´ Alto Contraste: Mejora visibilidad
‚Ä¢ üé® Daltonismo: Filtro especial
‚Ä¢ üñ±Ô∏è Cursor Grande: Cursor m√°s visible
‚Ä¢ üñºÔ∏è Sin Im√°genes: Oculta im√°genes
‚Ä¢ üîó Enlaces: Resalta y desactiva enlaces

üîÑ RESET: Restaura todo a valores por defecto
‚ùì AYUDA: Esta informaci√≥n

üíæ Todas las configuraciones se guardan autom√°ticamente`;

      alert(helpText);
    }
  }

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    const portal = AccessibilityPortal.getInstance();
    portal.initialize();
  });
</script>